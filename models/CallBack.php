<?php
namespace grozzzny\catalog\models;


use yii\behaviors\AttributeBehavior;
use yii\db\ActiveRecord;
use yii\easyii\behaviors\CacheFlush;
use Yii;
use yii\easyii\helpers\Mail;
use yii\easyii\models\Setting;

class CallBack extends Base
{
    const CACHE_KEY = 'gr_call_back';

    const TITLE = 'Обратная связь';
    const ALIAS = 'call_back';

    const SUBMENU_PHOTOS = false;
    const SUBMENU_FILES = false;
    const SHOW_ORDER_NUM = true;
    const PRIMARY_MODEL = true;


    const SCENARIO_EMAIL = 'scenario_email';
    const SCENARIO_PHONE = 'scenario_phone';
    const SCENARIO_EMAIL_AND_PHONE = 'scenario_email_and_phone';


    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub

        $behaviors[] = [
            'class' => AttributeBehavior::className(),
            'attributes' => [
                ActiveRecord::EVENT_BEFORE_INSERT => 'datetime',
            ],
            'value' => function () {
                return time();
            },
        ];

        $behaviors[] = [
            'class' => AttributeBehavior::className(),
            'attributes' => [
                ActiveRecord::EVENT_BEFORE_INSERT => 'ip',
            ],
            'value' => function () {
                return Yii::$app->request->getUserIP();
            },
        ];

        return $behaviors;
    }


    public static function tableName()
    {
        return 'gr_call_back';
    }

    public function rules()
    {
        return [
            ['id', 'number', 'integerOnly' => true],
            [['name', 'ip'], 'string'],
            [['description'], 'safe'],
            [['datetime'], 'integer'],
            [['email'], 'email'],
            ['phone', 'match', 'pattern' => '/^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$/'],
            ['status', 'default', 'value' => self::STATUS_ON],
            [['order_num'], 'integer'],

            ['email', 'required', 'on' => self::SCENARIO_EMAIL],
            ['phone', 'required', 'on' => self::SCENARIO_PHONE],
            [['email', 'phone'], 'required', 'on' => self::SCENARIO_EMAIL_AND_PHONE],
        ];
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Имя',
            'datetime' => 'Дата и время',
            'email' => 'Электронный адрес',
            'phone' => 'Телефон',
            'ip' => 'IP',
            'order_num' => 'Индекс сортировки',
            'status' => 'Состояние',
            'description' => 'Описание',
        ];
    }

    public static function queryFilter(&$query, $get)
    {
        if(!empty($get['text'])){
            $query->andFilterWhere([
                'OR',
                ['LIKE', 'name', $get['text']],
                ['LIKE', 'email', $get['text']],
                ['LIKE', 'phone', $get['text']],
                ['LIKE', 'description', $get['text']],
            ]
            );
        }
    }

    public static function querySort(&$provider)
    {
        $sort = [];

        $attributes = [
            'id',
            'name',
            'email',
            'phone',
            'datetime',
            'status',
            'order_num'
        ];

        if(self::SHOW_ORDER_NUM){
            $sort = $sort + ['defaultOrder' => ['order_num' => SORT_DESC]];
            $attributes = $attributes + ['order_num'];
        }

        $sort = $sort + ['attributes' => $attributes];

        $provider->setSort($sort);
    }

    public function getName()
    {
        return empty($this->name) ? 'Без имени' : $this->name;
    }


    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        if($insert){
            $this->mailAdmin();
        }
    }

    public function mailAdmin()
    {
        $settings = Yii::$app->getModule('admin')->activeModules['callback']->settings;

        return Mail::send(
            Setting::get('admin_email'),
            $settings['subject'],
            $settings['template'],
            ['callback' => $this]
        );
    }

}
