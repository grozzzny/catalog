<?php
namespace grozzzny\catalog\widgets;

use grozzzny\catalog\CatalogModule;
use grozzzny\catalog\models\Category;
use grozzzny\catalog\models\DataProperties;
use grozzzny\catalog\models\Item;
use grozzzny\catalog\models\Properties;
use kartik\select2\Select2;
use grozzzny\catalog\widgets\date_time_picker\DateTimePicker;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\web\JsExpression;
use yii\widgets\InputWidget;
use Yii;


class FilterWidget extends InputWidget
{
    /* @var DataProperties */
    public $model;

    protected $_type;
    protected $_settings;
    protected $_options;
    protected $_label;
    protected $_value;

    public $query_param = [];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->_type = $this->model->getType($this->attribute);
        $this->_settings = $this->model->getSettings($this->attribute);
        $this->_options = $this->model->getOptions($this->attribute);
        $this->_label = $this->model->attributeLabels()[$this->attribute];
        $this->_value = $this->model->{$this->attribute};
    }

    public function renderStringMultiple() {
        $options = ArrayHelper::merge([
            'placeholder' => $this->_label,
            'multiple' => true,
        ], $this->options);

        return Select2::widget([
            'name' => $this->attribute,
            'value' => $this->_value,
            'options' => $options,
            'pluginOptions' => [
                'allowClear' => true,
                'tags' => true,
            ],
        ]);
    }

    public function renderString() {
        $options = ArrayHelper::merge([
            'class' => 'form-control',
            'placeholder' => $this->_label
        ], $this->options);

        return Html::input('string', $this->attribute, $this->_value, $options);
    }

    public function renderIntegerRange () {
        $optionsFrom = ArrayHelper::merge([
            'class' => 'form-control',
            'placeholder' => $this->getPlaceholderFrom()
        ], $this->options);

        $optionsTo = ArrayHelper::merge([
            'class' => 'form-control',
            'placeholder' => $this->getPlaceholderTo()
        ], $this->options);

        $nameFrom = $this->getNameFrom();
        $nameTo = $this->getNameTo();

        return $this->getTemplateRange(
            Html::input('number', $nameFrom, $this->query_param[$nameFrom], $optionsFrom),
            Html::input('number', $nameTo, $this->query_param[$nameTo], $optionsTo)
        );
    }

    public function renderInteger () {
        $options = ArrayHelper::merge([
            'class' => 'form-control',
            'placeholder' => $this->_label
        ], $this->options);

        return Html::input('number', $this->attribute, $this->_value, $options);
    }

    public function renderSelect () {
        $options = ArrayHelper::merge([
            'class' => 'form-control',
            'placeholder' => $this->_label,
            'multiple' => $this->_settings->multiple ? true : false,
        ], $this->options);

        return Select2::widget([
            'name' => $this->attribute,
            'value' => $this->_value,
            'data' => $this->_options,
            'options' => $options,
            'pluginOptions' => [
                'allowClear' => true,
            ],
        ]);
    }

    public function renderRadio () {
        return '<ul class="list-group">
                    <li class="list-group-item" style="padding: 7px 15px;">
                        '.$this->_label.'
                        <div class="pull-right" style="width: 170px; margin-top: -8px; margin-right: -12px;">
                            <div class="input-group-btn">
                                <label class="btn btn-default" style="width: 70px">
                                    '.Html::radio($this->attribute, $this->_value === '1', ['value' => '1']).'
                                    '.Yii::t('gr', 'Yes').'
                                </label>
                                <label class="btn btn-default">
                                    '.Html::radio($this->attribute, $this->_value !== '1' && $this->_value !== '0', ['value' => '']).'
                                </label>
                                <label class="btn btn-default" style="width: 70px">
                                    '.Html::radio($this->attribute, $this->_value === '0', ['value' => '0']).'
                                    '.Yii::t('gr', 'No').'
                                </label>
                            </div>
                        </div>
                    </li>
               </ul>';
    }

    public function renderCategory()
    {
        $options = ArrayHelper::merge([
            'class' => 'form-control',
            'multiple' => $this->_settings->multiple ? true : false,
        ], $this->options);

        return Select2::widget([
            'name' => $this->attribute,
            'value' => $this->query_param[$this->attribute],
            'data' => $this->getDataCategory(),
            'options' => $options,
            'pluginOptions' => [
                'placeholder' => $this->_label,
                'allowClear' => true,
                'ajax' => [
                    'url' => $this->getUrlCategory(),
                    'dataType' => 'json',
                    'data' => new JsExpression('function(params) {
                       return {
                            q:params.term'.((empty($this->_options->category_id)) ? '': ', category_id:'.$this->_options->category_id).'
                        };
                    }'),
                ],
            ],
        ]);
    }

    public function renderDateTimePickerRange () {
        $nameFrom = $this->getNameFrom();
        $nameTo = $this->getNameTo();

        return $this->getTemplateRange(
            DateTimePicker::widget([
                'name' => $nameFrom,
                'value' => $this->query_param[$nameFrom],
                'placeholder' => $this->getPlaceholderFrom(),
            ]),
            DateTimePicker::widget([
                'name' => $nameTo,
                'value' => $this->query_param[$nameTo],
                'placeholder' => $this->getPlaceholderTo(),
            ])
        );
    }

    public function renderDateTimePicker () {
        return DateTimePicker::widget([
            'name' => $this->attribute,
            'value' => $this->_value,
            'placeholder' => $this->_label,
        ]);
    }

    public function renderCheckbox()
    {
        return '<ul class="list-group">
            <li class="list-group-item">
                '.$this->_label.'
                <div class="pull-right">
                    &nbsp;
                    '.
                    Html::checkbox($this->attribute, $this->_value, ['label' => false, 'id' => 'checkbox_'.$this->attribute]).
                    Html::label('', 'checkbox_'.$this->attribute)
                    .'
                </div>
            </li>
       </ul>';
    }

    public function run()
    {
        switch ($this->_type){
            case Properties::TYPE_STRING:
                if($this->_settings->multiple){
                    return $this->renderStringMultiple();
                }else{
                    return $this->renderString();
                }
            case Properties::TYPE_INTEGER:
                if($this->_settings->filter_range){
                    return $this->renderIntegerRange();
                }else{
                    return $this->renderInteger();
                }
            case Properties::TYPE_SELECT:
                return $this->renderSelect();
            case Properties::TYPE_CHECKBOX:
            case Properties::TYPE_MAP_PLACEMARK:
            case Properties::TYPE_MAP_POLYGON:
            case Properties::TYPE_MAP_POLYLINE:
            case Properties::TYPE_MAP_ROUTE:
                return $this->renderCheckbox();
            case Properties::TYPE_ITEMSCATEGORY:
            case Properties::TYPE_MULTICATEGORY:
            case Properties::TYPE_CATEGORY:
                return $this->renderCategory();
            case Properties::TYPE_DATETIME:
                if($this->_settings->filter_range){
                    return $this->renderDateTimePickerRange();
                }else{
                    return $this->renderDateTimePicker();
                }
            case Properties::TYPE_IMAGE:
            case Properties::TYPE_FILE:
                return $this->renderRadio();
            default:
                return $this->renderString();
        }
    }

    protected function getDataCategory(){
        if( in_array($this->_type, [Properties::TYPE_CATEGORY, Properties::TYPE_MULTICATEGORY])) {
            return ArrayHelper::map(Category::findAll(['id' => $this->model{$this->attribute}]), 'id', 'fullTitle');
        }else{
            return ArrayHelper::map(Item::findAll(['id' => $this->model{$this->attribute}]), 'id', 'title');
        }
    }

    protected function getUrlCategory(){
        $nameModule = CatalogModule::getNameModule();

        switch ($this->_type){
            case Properties::TYPE_ITEMSCATEGORY:
                $url = '/admin/'.$nameModule.'/properties/get-list-items-category';
                break;
            case Properties::TYPE_MULTICATEGORY:
                $url = '/admin/'.$nameModule.'/properties/get-list-multicategories';
                break;
            case Properties::TYPE_CATEGORY:
                $url = '/admin/'.$nameModule.'/properties/get-list-categories';
                break;
        }

        return $url;
    }

    protected function getTemplateRange ($input_from, $input_to)
    {
        $html = Html::beginTag('div', ['class' => 'row']);
        $html .= Html::tag('div', $input_from, ['class' => 'col-xs-5']);
        $html .= Html::tag('div', ' - ', ['class' => 'col-xs-2', 'style' => 'text-align: center;']);
        $html .= Html::tag('div', $input_to, ['class' => 'col-xs-5']);
        $html .= Html::endTag('div');

        return $html;
    }

    protected function getNameFrom ()
    {
        return $this->attribute . '_from';
    }

    protected function getNameTo ()
    {
        return $this->attribute . '_to';
    }

    protected function getPlaceholderFrom ()
    {
        return $this->_label . Yii::t('gr',' from');
    }

    protected function getPlaceholderTo ()
    {
        return $this->_label . Yii::t('gr',' to');
    }
}